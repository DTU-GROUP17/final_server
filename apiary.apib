FORMAT: 1A

# CDIO 3 Server

# Group Authentication

Has all the methods associated with authenticating a user.

## Authenticate [/authentication]

### Authenticates the user [POST /authentication/login]
+ Request (application/json)

        {
            "userName": "Hans",
            "password": "password"
        }
+ Response 200 (application/json)
        {
            "message": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ0ZXN0VXNlciJ9.m_ap4_eXb0iIPNyyz0Da5PWNMd-dxw6miecHLKHxEczEWzugbNuvFN4n_Il1rTImSe7TKKo7EqxS_R2NteV_3w",
            "status": 200
        }

# Group Users 

## Self [/self]

### View the currently authenticated user [GET]
+ Headers
    Authorization : {JWT token}
+ Response 200(application/json)
{
  "status": "User",
  "id": 1,
  "roles": [
    {
      "status": "Role",
      "id": 1,
      "name": "admin"
    }
  ],
  "name": "testUser",
  "userName": "testUser"
}

### Update the currently authenticated user [PATCH]

## Users [/users]
+ Headers
    Authorization : {JWT token}

### Creates a new user [POST]
+ Request (application/json)
    {
        "name" : "wtf",
        "userName" : "test wtf",
        "password" : "1234",
        "roles" : ["admin"]
    }
+ Response 200(application/json)
{
  "status": "User",
  "id": 4,
  "roles": [
    {
      "status": "Role",
      "id": 1,
      "name": "admin"
    }
  ],
  "name": "wtf",
  "userName": "test wtf"
}


### Views all users [GET]
+ Response 200(application/json)
[
  {
    "id": 1,
    "roles": [
      {
        "status": "Role",
        "id": 1,
        "name": "admin"
      }
    ],
    "name": "testUser",
    "userName": "testUser"
  },
  {
    "id": 2,
    "roles": [
      {
        "status": "Role",
        "id": 1,
        "name": "admin"
      }
    ],
    "name": "test",
    "userName": "test"
  },
  {
    "id": 4,
    "roles": [
      {
        "status": "Role",
        "id": 1,
        "name": "admin"
      }
    ],
    "name": "wtf",
    "userName": "test wtf"
  }
]



## User [/users/{user_id}]
+ Headers
    Authorization : {JWT token}
+ Parameters
    + user_id (number, required) - ID of the user in form of an integer.
    
   
### View a users information [GET]

### Update a user [PATCH]
+ Headers
    Authorization : {JWT token}

+ Response 204 (application/json)

### Reset users password [GET /users/{user_id}/reset-password]